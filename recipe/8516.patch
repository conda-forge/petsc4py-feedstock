From 57a271c662ddd358429d923c8d77750fa3a2b485 Mon Sep 17 00:00:00 2001
From: Lisandro Dalcin <dalcinl@gmail.com>
Date: Fri, 4 Jul 2025 10:25:16 +0300
Subject: [PATCH 1/2] petsc4py: Support building with Py_LIMITED_API

---
 setup.py                 | 34 +++++++-
 .../petsc4py/src/petsc4py/PETSc/PETSc.pyx     | 25 +-----
 .../petsc4py/src/petsc4py/PETSc/cyclicgc.pxi  | 18 ++--
 .../src/petsc4py/include/petsc4py/pybuffer.h  |  8 ++
 .../src/petsc4py/include/petsc4py/pyscalar.h  |  5 ++
 src/pyapicompat.h        | 87 +++++++++++++++++++
 6 files changed, 145 insertions(+), 32 deletions(-)
 create mode 100644 src/pyapicompat.h

diff --git a/setup.py b/setup.py
index 70fdc76f7bb..59f91e17577 100755
--- a/setup.py
+++ b/setup.py
@@ -27,6 +27,8 @@ PLIST = [PNAME]
 # Metadata
 # --------------------------------------------------------------------
 
+py_limited_api = (3, 10)
+
 
 def F(string):
     return string.format(
@@ -122,6 +124,20 @@ metadata_extra = {
     'long_description_content_type': 'text/x-rst',
 }
 
+def get_build_pysabi():
+    abi = os.environ.get("PETSC4PY_BUILD_PYSABI")
+    if abi and sys.implementation.name == "cpython":
+        if abi == "1":
+            return py_limited_api
+        if abi.startswith("cp"):
+            abi = abi[2:]
+        if "." in abi:
+            x, y = abi.split(".")
+        else:
+            x, y = abi[0], abi[1:]
+        return (int(x), int(y))
+    return None
+
 # --------------------------------------------------------------------
 # Extension modules
 # --------------------------------------------------------------------
@@ -265,6 +281,20 @@ def run_setup():
         setup_args.update(metadata_extra)
     #
     conf = __import__(F('conf{name}'))
+    cython_sources = [src for src in sources()]  # noqa: C416
+    ext_modules = [conf.Extension(**ext) for ext in extensions()]
+    #
+    sabi = get_build_pysabi()
+    if sabi and setuptools:
+        api_tag = "cp{}{}".format(*sabi)
+        options = {"bdist_wheel": {"py_limited_api": api_tag}}
+        setup_args["options"] = options
+        api_ver = "0x{:02X}{:02X}0000".format(*sabi)
+        defines = [("Py_LIMITED_API", api_ver)]
+        for ext in ext_modules:
+            ext.define_macros.extend(defines)
+            ext.py_limited_api = True
+    #
     conf.setup(
         packages=[
             F('{pyname}'),
@@ -287,8 +317,8 @@ def run_setup():
                 F('{name}.cfg'),
             ],
         },
-        cython_sources=[src for src in sources()],  # noqa: C416
-        ext_modules=[conf.Extension(**ext) for ext in extensions()],
+        cython_sources=cython_sources,
+        ext_modules=ext_modules,
         **setup_args,
     )
 
diff --git a/src/petsc4py/PETSc/PETSc.pyx b/src/petsc4py/PETSc/PETSc.pyx
index 65770d7e57c..5e15acd7309 100644
--- a/src/petsc4py/PETSc/PETSc.pyx
+++ b/src/petsc4py/PETSc/PETSc.pyx
@@ -2,6 +2,7 @@
 
 cdef extern from * nogil:
     """
+    #include "pyapicompat.h"
     #include "lib-petsc/compat.h"
     #include "lib-petsc/custom.h"
 
@@ -56,29 +57,7 @@ cdef inline object S_(const char p[]):
 # SETERR Support
 # --------------
 
-cdef extern from *:
-    """
-#if PY_VERSION_HEX < 0X30C0000
-static PyObject *PyErr_GetRaisedException()
-{
-    PyObject *t, *v, *tb;
-    PyErr_Fetch(&t, &v, &tb);
-    PyErr_NormalizeException(&t, &v, &tb);
-    if (tb != NULL) PyException_SetTraceback(v, tb);
-    Py_XDECREF(t);
-    Py_XDECREF(tb);
-    return v;
-}
-static void PyErr_SetRaisedException(PyObject *v)
-{
-    PyObject *t = (PyObject *)Py_TYPE(v);
-    PyObject *tb = PyException_GetTraceback(v);
-    Py_XINCREF(t);
-    Py_XINCREF(tb);
-    PyErr_Restore(t, v, tb);
-}
-#endif
-    """
+cdef extern from "Python.h":
     void PyErr_SetObject(object, object)
     PyObject *PyExc_RuntimeError
     PyObject *PyErr_GetRaisedException()
diff --git a/src/petsc4py/PETSc/cyclicgc.pxi b/src/petsc4py/PETSc/cyclicgc.pxi
index ed9b1570776..0b18f842610 100644
--- a/src/petsc4py/PETSc/cyclicgc.pxi
+++ b/src/petsc4py/PETSc/cyclicgc.pxi
@@ -4,16 +4,21 @@ cdef extern from * nogil:
     int printf(char *, ...)
 
 cdef extern from "Python.h":
+    """
+    #if defined(Py_LIMITED_API)
+    #define _pytype_enable_gc(t, traverse, clear) \
+    do { (void)(traverse); (void)(clear); } while (0)
+    #else
+    #define _pytype_enable_gc(t, traverse, clear) \
+    do { (t)->tp_traverse = (traverse); (t)->tp_clear = (clear); } while (0)
+    #endif
+    """
     ctypedef struct PyObject
     ctypedef struct PyTypeObject
     ctypedef int visitproc(PyObject *, void *) noexcept
     ctypedef int traverseproc(PyObject *, visitproc, void *) noexcept
     ctypedef int inquiry(PyObject *) noexcept
-    ctypedef struct PyTypeObject:
-        char         *tp_name
-        traverseproc tp_traverse
-        inquiry      tp_clear
-    PyTypeObject *Py_TYPE(PyObject *)
+    void _pytype_enable_gc(PyTypeObject *, traverseproc, inquiry)
 
 cdef extern from "<petsc/private/garbagecollector.h>" nogil:
     PetscErrorCode PetscGarbageCleanup(MPI_Comm)
@@ -32,8 +37,7 @@ cdef int tp_clear(PyObject *o) noexcept:
     return 0
 
 cdef inline void TypeEnableGC(PyTypeObject *t) noexcept:
-    t.tp_traverse = tp_traverse
-    t.tp_clear    = tp_clear
+    _pytype_enable_gc(t, tp_traverse, tp_clear)
 
 
 def garbage_cleanup(comm: Comm | None = None) -> None:
diff --git a/src/petsc4py/include/petsc4py/pybuffer.h b/src/petsc4py/include/petsc4py/pybuffer.h
index 36352f2b0da..fa6d963040a 100644
--- a/src/petsc4py/include/petsc4py/pybuffer.h
+++ b/src/petsc4py/include/petsc4py/pybuffer.h
@@ -69,7 +69,11 @@ int PyPetscBuffer_FillInfo(Py_buffer *view,
   view->internal = NULL;
   if ((flags & PyBUF_ND) == PyBUF_ND) {
     view->ndim = 1;
+#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 < 0x030D0000
+    view->internal = malloc(2*sizeof(Py_ssize_t));
+#else
     view->internal = PyMem_Malloc(2*sizeof(Py_ssize_t));
+#endif
     if (!view->internal) { PyErr_NoMemory(); return -1; }
     view->shape = (Py_ssize_t *) view->internal;
     view->shape[0] = view->len/view->itemsize;
@@ -85,7 +89,11 @@ static inline
 void PyPetscBuffer_Release(Py_buffer *view)
 {
   if (view == NULL) return;
+#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 < 0x030D0000
+  if (view->internal) free(view->internal);
+#else
   if (view->internal) PyMem_Free(view->internal);
+#endif
   view->internal = NULL;
 }
 
diff --git a/src/petsc4py/include/petsc4py/pyscalar.h b/src/petsc4py/include/petsc4py/pyscalar.h
index 8997087c032..4831ce1b9c2 100644
--- a/src/petsc4py/include/petsc4py/pyscalar.h
+++ b/src/petsc4py/include/petsc4py/pyscalar.h
@@ -20,9 +20,14 @@ static inline
 PetscScalar PyPetscScalar_AsPetscScalar(PyObject *o)
 {
 #if defined(PETSC_USE_COMPLEX)
+#if defined(Py_LIMITED_API)
+  PetscReal a = (PetscReal)PyComplex_RealAsDouble(o);
+  PetscReal b = (PetscReal)PyComplex_ImagAsDouble(o);
+#else
   Py_complex cval = PyComplex_AsCComplex(o);
   PetscReal a = (PetscReal)cval.real;
   PetscReal b = (PetscReal)cval.imag;
+#endif
   return a + b * PETSC_i;
 #else
   return (PetscScalar)PyFloat_AsDouble(o);
diff --git a/src/pyapicompat.h b/src/pyapicompat.h
new file mode 100644
index 00000000000..0d5f1d5baba
--- /dev/null
+++ b/src/pyapicompat.h
@@ -0,0 +1,87 @@
+/* Author:  Lisandro Dalcin   */
+/* Contact: dalcinl@gmail.com */
+
+/* -------------------------------------------------------------------------- */
+
+#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 < 0x030B0000
+
+#define Py_bf_getbuffer 1
+#define Py_bf_releasebuffer 2
+
+typedef struct {
+  void *buf;
+  PyObject *obj;
+  Py_ssize_t len;
+  Py_ssize_t itemsize;
+  int readonly;
+  int ndim;
+  char *format;
+  Py_ssize_t *shape;
+  Py_ssize_t *strides;
+  Py_ssize_t *suboffsets;
+  void *internal;
+} Py_buffer;
+
+#define PyBUF_SIMPLE 0
+#define PyBUF_WRITABLE 0x0001
+
+#define PyBUF_FORMAT 0x0004
+#define PyBUF_ND 0x0008
+#define PyBUF_STRIDES (0x0010 | PyBUF_ND)
+#define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
+#define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
+#define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
+#define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
+
+#define PyBUF_CONTIG (PyBUF_ND | PyBUF_WRITABLE)
+#define PyBUF_CONTIG_RO (PyBUF_ND)
+
+#define PyBUF_STRIDED (PyBUF_STRIDES | PyBUF_WRITABLE)
+#define PyBUF_STRIDED_RO (PyBUF_STRIDES)
+
+#define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_WRITABLE | PyBUF_FORMAT)
+#define PyBUF_RECORDS_RO (PyBUF_STRIDES | PyBUF_FORMAT)
+
+#define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)
+#define PyBUF_FULL_RO (PyBUF_INDIRECT | PyBUF_FORMAT)
+
+#define PyBUF_READ  0x100
+#define PyBUF_WRITE 0x200
+
+PyAPI_FUNC(int)  PyObject_CheckBuffer(PyObject *);
+PyAPI_FUNC(int)  PyObject_GetBuffer(PyObject *, Py_buffer *, int);
+PyAPI_FUNC(void) PyBuffer_Release(Py_buffer *);
+PyAPI_FUNC(int)  PyBuffer_FillInfo(Py_buffer *, PyObject *,
+                                   void *, Py_ssize_t, int, int);
+
+#endif
+
+/* -------------------------------------------------------------------------- */
+
+#if (defined(Py_LIMITED_API) && Py_LIMITED_API+0 < 0x030C0000) || PY_VERSION_HEX < 0X30C0000
+
+#define PyErr_GetRaisedException PyErr_GetRaisedException_312
+static PyObject *PyErr_GetRaisedException(void)
+{
+    PyObject *t, *v, *tb;
+    PyErr_Fetch(&t, &v, &tb);
+    PyErr_NormalizeException(&t, &v, &tb);
+    if (tb != NULL) PyException_SetTraceback(v, tb);
+    Py_XDECREF(t);
+    Py_XDECREF(tb);
+    return v;
+}
+
+#define PyErr_SetRaisedException PyErr_SetRaisedException_312
+static void PyErr_SetRaisedException_312(PyObject *v)
+{
+    PyObject *t = (PyObject *)Py_TYPE(v);
+    PyObject *tb = PyException_GetTraceback(v);
+    Py_XINCREF(t);
+    Py_XINCREF(tb);
+    PyErr_Restore(t, v, tb);
+}
+
+#endif
+
+/* -------------------------------------------------------------------------- */
-- 
GitLab


From b6786572fc95c7e4d221b6ca93d1c40a4af0feb1 Mon Sep 17 00:00:00 2001
From: Lisandro Dalcin <dalcinl@gmail.com>
Date: Fri, 4 Jul 2025 10:25:16 +0300
Subject: [PATCH 2/2] petsc4py: Update changelog

---
 CHANGES.rst | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/CHANGES.rst b/CHANGES.rst
index 0d8b3c2e532..6dcebd9523e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,6 +6,15 @@ CHANGES: PETSc for Python
 :Contact: dalcinl@gmail.com
 
 
+Release 3.24.0
+==============
+
+- Update to PETSc 3.24 release.
+
+- Support (opt-in via setting the environment variable
+  ``PETSC4PY_BUILD_PYSABI=1``) for building with ``Py_LIMITED_API``
+  (Python Stable ABI) under Python 3.10+ (requires Cython 3.1+).
+
 Release 3.23.0
 ==============
 
-- 
GitLab

